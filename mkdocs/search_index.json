{
    "docs": [
        {
            "location": "/", 
            "text": "FuzzyFileNav\n\n\nA file navigation system for Sublime Text.\n\n\n\n\nOverview\n\n\nFuzzyFileNav is a simple plugin that allows for quick navigation of the file system from the quick panel.  It also allows for deletion, copying, moving, creation of files and folders, and other actions.\n\n\nCredits\n\n\n\n\n\n\nThanks to quodlibet for helping come up with great ideas for the plugin during development.\n\n\n\n\n\n\nSpecial thanks to \nBoundincode\n whose witty humor and quirky coding fueled the development of the plugin. (If only he was more humble\n)\n\n\n\n\n\n\nThanks to biermeester and matthjes for their suggestions and ideas with platform/host specific settings.", 
            "title": "About FuzzyFileNav"
        }, 
        {
            "location": "/#fuzzyfilenav", 
            "text": "A file navigation system for Sublime Text.", 
            "title": "FuzzyFileNav"
        }, 
        {
            "location": "/#overview", 
            "text": "FuzzyFileNav is a simple plugin that allows for quick navigation of the file system from the quick panel.  It also allows for deletion, copying, moving, creation of files and folders, and other actions.", 
            "title": "Overview"
        }, 
        {
            "location": "/#credits", 
            "text": "Thanks to quodlibet for helping come up with great ideas for the plugin during development.    Special thanks to  Boundincode  whose witty humor and quirky coding fueled the development of the plugin. (If only he was more humble )    Thanks to biermeester and matthjes for their suggestions and ideas with platform/host specific settings.", 
            "title": "Credits"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling FuzzyFileNav.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install FuzzyFileNav is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nFuzzyFileNav\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install FuzzyFileNav for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FuzzyFileNav.git FuzzyFileNav\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing FuzzyFileNav.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install FuzzyFileNav is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  FuzzyFileNav ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install FuzzyFileNav for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/FuzzyFileNav.git FuzzyFileNav    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguring and using FuzzyFileNav.\n\n\n\n\nGeneral Usage\n\n\nBy default, FuzzyFileNav has access enabled via the view context menu.  The context menu gives you various fuzzy navigation methods.  By selecting \nFuzzy Nav Here...\n, you will begin navigating the parent folder of the view\ns file (if saved on disk).  By selecting an option under \nFuzzy File Nav\n, you can start with a list of folders from the project, bookmarks, or the root of the file system.  If you prefer to have initiate the commands from a shortcut, you can define your own; some suggestions are shown in \nSuggested Accessibility Shortcuts\n.  From the FuzzyFileNav panel, you can use shortcuts to copy, paste, delete, open, and various other file actions.\n\n\nFile Action Shortcuts\n\n\nWhile a FuzzyFileNav navigation panel is open, a number of shortcuts will be activated that can either apply different actions to a file or folder.  Most shortcuts are a combinations of the modifier key \nctrl\n; for OSX simply replace the \nctrl\n modifier with \nsuper\n.  Actions are only performed when the \nfull\n name is typed into the panel; using the path completion shortcut will make this quick and easy.\n\n\nAutocomplete File Paths\n\n\nFuzzyFileNav can complete file paths in the quick panel when \ntab\n is pressed.  Depending on the completion style \nshift\n + \ntab\n can navigate through the completion options backwards.  There are three styles of autocompletion that FuzzyFileNav supports.\n\n\n\n\n\n\n\n\nAutocomplete\nStyle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSublime\n\n\nComplete path with the selected index in the quick panel.\n\n\n\n\n\n\nUnix/Linux\n\n\nComplete path like a unix/linux terminal traditionally completes paths.\n\n\n\n\n\n\nWindows\n\n\nComplete path like Windows completes paths in a command prompt.\n\n\n\n\n\n\n\n\nSee the \ncompletion_style\n setting for more info on configuring the completion style.\n\n\nNavigating Folders\n\n\nWhen navigating folders in the quick panel, you start typing the folders name, press \ntab\n to complete the path, and type a \n/\n at the end (you can also use \n\\\n on windows).  As soon as the trailing slash is entered, the path will be navigated to.  The \nfull\n file path must be used for this to work which is why autocomplete will come in handy.  Selecting a file and pressing enter enter in the panel will also navigate into the folder.\n\n\n\n\nTip\n\n\nYour file systems root can be accessed any time by typing \n/\n.  You can also switch to windows drives by typing \nc:\\\n etc.\n\n\nThe home folder can be accessed any time by typing \n~/\n into the FuzzyFileNav quick panel.\n\n\n\n\nToggle the showing/hiding of hidden files.\n\n\nctrl\n + \nh\n toggles the showing/hiding of hidden files defined by the system or that are hidden via the regular expression patterns in the settings file.\n\n\nShow Fuzzy Bookmarks\n\n\nctrl\n + \nb\n shows the FuzzyFileNav bookmarks panel.\n\n\nFuzzy Open File\n\n\nWhen a file is selected in the drop down list of the quick panel, you can either press \nenter\n or \nright\n to open the file.\n\n\nFuzzy File Delete\n\n\nctrl\n + \nd\n deletes the folder/file object currently typed in the FuzzyFileNav panel.\n\n\nFuzzy File Copy\n\n\nctrl\n + \nc\n Copies the folder/file object currently typed file in the FuzzyFileNav panel.  The copy will remain in the clipboard until a paste is performed or a new copy is initiated.\n\n\nFuzzy File Cut\n\n\nctrl\n + \nx\n cuts (moves) the folder/file object currently typed into the FuzzyFileNav panel.  A Fuzzy File Paste must be performed to complete the cut (move).\n\n\nFuzzy File Paste\n\n\nctrl\n + \nv\n Completes the copying and pasting of the folder/file object that is in the clipboard.  The file/folder will be pasted into the currently opened folder in the FuzzyFileNav panel.  To rename the folder/file object on paste, type the full name in the panel that should be used before pressing \nctrl\n + \nv\n.\n\n\nFuzzy Make File\n\n\nctrl\n + \nn\n Creates a new file in the currently opened folder in the FuzzyFileNav panel.  The name that is typed into the panel is the name that will be used.\n\n\nFuzzy Make Folder\n\n\nctrl\n + \nshift\n + \nn\n Creates a new folder in the currently opened folder in the Fuzzy File Nav Panel.  The name that is typed into the panel is the name that will be used.\n\n\nFuzzy Save As File\n\n\nctrl\n + \ns\n saves view to the the currently opened folder in the FuzzyFileNav Panel.  The name that is typed into the panel is the name of the file the view will be saved to.  You will be prompted for file overwrite.\n\n\nFuzzy Reveal File/Folder in File Manager\n\n\nctrl\n + \nr\n will reveal the location of the file/folder name typed into the FuzzyFileNav panel in your file manager.  Will use the current folder if a valid one is not typed into the panel.\n\n\nFuzzy Search Folder\n\n\nctrl\n + \nf\n will open a folder search panel with the current folder\ns path, or a the path of a subfolder if one is typed into the FuzzyFileNav panel, pre-loaded into the \nwhere\n box.  Any content in clipboard will be pre-loaded into the \nFind\n box.\n\n\nFuzzy Add Folder to Project\n\n\nctrl\n + \nr\n will add the location of the folder name typed into the FuzzyFileNav panel into the current project.  Will use the current folder if a valid one is not typed into the panel.\n\n\nFuzzy Current Working View\n\n\nctrl\n + \n.\n gets the file name of the current working view and copies it to the Fuzzy File Nav Panel.\n\n\nSettings\n\n\nThere are various settings you can alter to enhance your experience with FuzzyFileNav.\n\n\nbookmarks\n\n\nWhen using the bookmark command, you can bring up a list of bookmarked folders.  Bookmarks are defined in \nbookmarks\n setting as shown below. To add or change the bookmark list, just add, remove or modify an entry in the bookmark list.  Each entry is a dictionary containing two keys: \nname\n and \npath\n.  \nname\n is the name that will be displayed, path is the path to the folder.\n\n\n    \n// Bookmarked paths\n\n    \nbookmarks\n:\n \n[\n\n        \n{\nname\n:\n \nMy Computer\n,\n \npath\n:\n \n},\n\n        \n{\nname\n:\n \nRoot\n,\n \npath\n:\n \n/\n}\n\n    \n]\n\n\n\n\n\n\n\n\nTip\n\n\nIf it is desired to have specific bookmarks show up only on a specific OS or a specific host, you can augment the \npath\n option using the notation below.  For more information, please see \nPlatform/Computer Specific Settings\n.\n\n\n    \n// Bookmarked paths\n\n    \nbookmarks\n:\n \n[\n\n        \n{\nname\n:\n \nMy Computer\n,\n \npath\n:\n \n{\n#multiconf#\n:\n \n[{\nos:windows\n:\n \n}]}},\n\n        \n{\nname\n:\n \nRoot\n,\n \npath\n:\n \n{\n#multiconf#\n:\n \n[{\nos:linux\n:\n \n/\n},\n \n{\nos:osx\n:\n \n/\n}]}}\n\n    \n]\n\n\n\n\n\n\n\n\nhome\n\n\nhome\n is your home directory.  By default it is \n~\n which expands to your user directory on your OS, but if you would like to modify it to be something else, this is the place!\n\n\n    \n// Location of home folder\n\n    \nhome\n:\n \n~\n,\n\n\n\n\n\n\nregex_exclude\n\n\nregex_exclude\n is an array of regular expression patterns that indicate which files and folders FuzzyFileNav should ignore.\n\n\n    \n// Patterns of files/folders to exclude\n\n    \nregex_exclude\n:\n \n[\n.*\\\\.(DS_Store|svn|git)$\n],\n\n\n\n\n\n\nkeep_panel_open_after_action\n\n\nControls whether the quick panel should remain open after a file action (such as open) as performed.\n\n\n    \n// Keep panel open after a file is opened, deleted, created, etc. so\n\n    \n// More files can be have actions performed on them.\n\n    \nkeep_panel_open_after_action\n:\n \ntrue\n,\n\n\n\n\n\n\nkeep_panel_open_exceptions\n\n\nProvides exceptions for the \nkeep_panel_open_after_action\n setting.\n\n\n    \n// Actions that can ignore the keep panel open settings\n\n    \n// Available actions: delete, open, saveas, mkfile, mkdir, paste\n\n    \nkeep_panel_open_exceptions\n:\n \n[],\n\n\n\n\n\n\nshow_system_hidden_files\n\n\nControls whether system hidden files are shown in FuzzyFileNav. How files are hidden vary on a given OS, but this should be able to show them.\n\n\n    \n// Controls whether system hidden files are shown in FuzzyFileNav.\n\n    \nshow_system_hidden_files\n:\n \ntrue\n,\n\n\n\n\n\n\ncompletion_style\n\n\nAllows the changing of the completion style to one of three styles.\n\n\n    \n// (fuzzy/windows/nix)\n\n    \n// fuzzy   - this will auto-complete with the selected index in the quick panel\n\n    \n// windows - this will complete like a windows terminal would complete paths\n\n    \n// nix     - this will complete like a unix/linux terminal traditionally completes paths\n\n    \ncompletion_style\n:\n \nfuzzy\n,\n\n\n\n\n\n\nstart_from_here_default_action\n\n\nThere are times when the a FuzzyFileNav navigation command won\nt be fed a path.  One example is when the \nFuzzy Nav Here...\n command is run from a view that hasn\nt been saved to disk.  This setting allows you to sepcify the fallback options to display.\n\n\n    \n// If the \nFuzzyStartFromFileCommand\n is run outside of an open buffer\n\n    \n// or from a buffer that does not exist on disk, you can specify\n\n    \n// its default action to do instead of starting navigation from\n\n    \n// a file\ns location.  Options are \nbookmarks\n, \nhome\n, \nroot\n, \nproject\n.\n\n    \nstart_from_here_default_action\n:\n \nbookmarks\n,\n\n\n\n\n\n\nadd_folder_to_project_relative\n\n\nWhen a FuzzyFileNav adds a folder to the project, this will be used to determined if the folder should be added as a path relative to the project file or not.\n\n\n    \n// Add your folders relative to the project file (if project file exists on disk)\n\n    \nadd_folder_to_project_relative\n:\n \nfalse\n,\n\n\n\n\n\n\nadd_folder_to_project_follow_symlink\n\n\nWhen a FuzzyFileNav adds a folder to the project, this will be used to determined if the folder should have the \nfollow_symlinks\n option set.\n\n\n    \n// When adding folder to project, set \nfollow_symlinks\n setting as true or false\n\n    \nadd_folder_to_project_follow_symlink\n:\n \ntrue\n,\n\n\n\n\n\n\nuse_sub_notify\n\n\nEnables use of \nSubNotify\n notifications.\n\n\n    \n// Use subnotify if available\n\n    \nuse_sub_notify\n:\n \ntrue\n\n\n\n\n\n\nSuggested Accessibility Shortcuts\n\n\nYou can create shortcuts to access FuzzyFileNav Quickly, some examples are shown below.\n\n\nFor Windows/Linux:\n\n\n    \n[\n\n        \n// Start from the parent folder of the current view\ns file\n\n        \n{\n \nkeys\n:\n \n[\nctrl+o\n],\n \ncommand\n:\n \nfuzzy_start_from_file\n \n},\n\n        \n// Show bookmarked folders\n\n        \n{\n \nkeys\n:\n \n[\nctrl+shift+o\n],\n \ncommand\n:\n \nfuzzy_bookmarks_load\n \n}\n\n    \n]\n\n\n\n\n\n\nFor OSX:\n\n\n    \n[\n\n        \n// Start from the parent folder of the current view\ns file\n\n        \n{\n \nkeys\n:\n \n[\nsuper+o\n],\n \ncommand\n:\n \nfuzzy_start_from_file\n \n},\n\n        \n// Show bookmarked folders\n\n        \n{\n \nkeys\n:\n \n[\nsuper+shift+o\n],\n \ncommand\n:\n \nfuzzy_bookmarks_load\n \n}\n\n    \n]\n\n\n\n\n\n\nPlatform/Computer Specific Settings\n\n\nCurrently, the \nhome\n settings in the settings file, and the \npath\n setting in a bookmark entry can be configured to have multiple OS and/or host specific settings to help manage settings across different machines.\n\n\nThe syntax to configure one of these settings for multiple OS and/or hostname:\n\n\n\n\nThe setting should be a key/value pair, where the key is \n#multiconf#\n and the value is an array of key/value entries whose keys describe the host and/or os qualifiers needed for the value to be used.\n\n\nThe key/value entries will have a key that represents one or more qualifiers, each of which must be separated with a \n;\n\n\nEach qualifier consists of the qualifier type and a qualifier value to compare against.  These will be separated by a \n:\n.\n\n\nThere are two supported qualifiers: \nhost\n and \nos\n.  \nhost\n is the name of your PC.  \nos\n is the platform and can be either \nwindows\n, \nlinux\n, or \nosx\n.\n\n\nThe key/value entries will have a value associated with the key, and can be of any type: string, number, array, dictionary, etc.  This value is what will be returned if the qualifier is met.\n\n\n\n\nexamples:\n\n\n    \nhome\n:\n \n{\n#multiconf#\n:\n \n[{\nos:windows\n:\n \nc:\\\\Some\\\\Location\n},\n \n{\nos:linux\n:\n \n/Some/Linux/Location\n}]},\n\n\n\n\n\n\n    \nhome\n:\n \n{\n\n        \n#multiconf#\n:\n \n[\n\n            \n{\nos:windows\n:\n \nC:\\\\Users\n},\n\n            \n{\nos:linux;host:his_pc\n:\n \n/home\n},\n\n            \n{\nos:linux;host:her_pc\n:\n \n/home/her/special\n}\n\n        \n]\n\n    \n}", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuring and using FuzzyFileNav.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-usage", 
            "text": "By default, FuzzyFileNav has access enabled via the view context menu.  The context menu gives you various fuzzy navigation methods.  By selecting  Fuzzy Nav Here... , you will begin navigating the parent folder of the view s file (if saved on disk).  By selecting an option under  Fuzzy File Nav , you can start with a list of folders from the project, bookmarks, or the root of the file system.  If you prefer to have initiate the commands from a shortcut, you can define your own; some suggestions are shown in  Suggested Accessibility Shortcuts .  From the FuzzyFileNav panel, you can use shortcuts to copy, paste, delete, open, and various other file actions.", 
            "title": "General Usage"
        }, 
        {
            "location": "/usage/#file-action-shortcuts", 
            "text": "While a FuzzyFileNav navigation panel is open, a number of shortcuts will be activated that can either apply different actions to a file or folder.  Most shortcuts are a combinations of the modifier key  ctrl ; for OSX simply replace the  ctrl  modifier with  super .  Actions are only performed when the  full  name is typed into the panel; using the path completion shortcut will make this quick and easy.  Autocomplete File Paths  FuzzyFileNav can complete file paths in the quick panel when  tab  is pressed.  Depending on the completion style  shift  +  tab  can navigate through the completion options backwards.  There are three styles of autocompletion that FuzzyFileNav supports.     Autocomplete Style  Description      Sublime  Complete path with the selected index in the quick panel.    Unix/Linux  Complete path like a unix/linux terminal traditionally completes paths.    Windows  Complete path like Windows completes paths in a command prompt.     See the  completion_style  setting for more info on configuring the completion style.  Navigating Folders  When navigating folders in the quick panel, you start typing the folders name, press  tab  to complete the path, and type a  /  at the end (you can also use  \\  on windows).  As soon as the trailing slash is entered, the path will be navigated to.  The  full  file path must be used for this to work which is why autocomplete will come in handy.  Selecting a file and pressing enter enter in the panel will also navigate into the folder.   Tip  Your file systems root can be accessed any time by typing  / .  You can also switch to windows drives by typing  c:\\  etc.  The home folder can be accessed any time by typing  ~/  into the FuzzyFileNav quick panel.   Toggle the showing/hiding of hidden files.  ctrl  +  h  toggles the showing/hiding of hidden files defined by the system or that are hidden via the regular expression patterns in the settings file.  Show Fuzzy Bookmarks  ctrl  +  b  shows the FuzzyFileNav bookmarks panel.  Fuzzy Open File  When a file is selected in the drop down list of the quick panel, you can either press  enter  or  right  to open the file.  Fuzzy File Delete  ctrl  +  d  deletes the folder/file object currently typed in the FuzzyFileNav panel.  Fuzzy File Copy  ctrl  +  c  Copies the folder/file object currently typed file in the FuzzyFileNav panel.  The copy will remain in the clipboard until a paste is performed or a new copy is initiated.  Fuzzy File Cut  ctrl  +  x  cuts (moves) the folder/file object currently typed into the FuzzyFileNav panel.  A Fuzzy File Paste must be performed to complete the cut (move).  Fuzzy File Paste  ctrl  +  v  Completes the copying and pasting of the folder/file object that is in the clipboard.  The file/folder will be pasted into the currently opened folder in the FuzzyFileNav panel.  To rename the folder/file object on paste, type the full name in the panel that should be used before pressing  ctrl  +  v .  Fuzzy Make File  ctrl  +  n  Creates a new file in the currently opened folder in the FuzzyFileNav panel.  The name that is typed into the panel is the name that will be used.  Fuzzy Make Folder  ctrl  +  shift  +  n  Creates a new folder in the currently opened folder in the Fuzzy File Nav Panel.  The name that is typed into the panel is the name that will be used.  Fuzzy Save As File  ctrl  +  s  saves view to the the currently opened folder in the FuzzyFileNav Panel.  The name that is typed into the panel is the name of the file the view will be saved to.  You will be prompted for file overwrite.  Fuzzy Reveal File/Folder in File Manager  ctrl  +  r  will reveal the location of the file/folder name typed into the FuzzyFileNav panel in your file manager.  Will use the current folder if a valid one is not typed into the panel.  Fuzzy Search Folder  ctrl  +  f  will open a folder search panel with the current folder s path, or a the path of a subfolder if one is typed into the FuzzyFileNav panel, pre-loaded into the  where  box.  Any content in clipboard will be pre-loaded into the  Find  box.  Fuzzy Add Folder to Project  ctrl  +  r  will add the location of the folder name typed into the FuzzyFileNav panel into the current project.  Will use the current folder if a valid one is not typed into the panel.  Fuzzy Current Working View  ctrl  +  .  gets the file name of the current working view and copies it to the Fuzzy File Nav Panel.", 
            "title": "File Action Shortcuts"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "There are various settings you can alter to enhance your experience with FuzzyFileNav.  bookmarks  When using the bookmark command, you can bring up a list of bookmarked folders.  Bookmarks are defined in  bookmarks  setting as shown below. To add or change the bookmark list, just add, remove or modify an entry in the bookmark list.  Each entry is a dictionary containing two keys:  name  and  path .   name  is the name that will be displayed, path is the path to the folder.       // Bookmarked paths \n     bookmarks :   [ \n         { name :   My Computer ,   path :   }, \n         { name :   Root ,   path :   / } \n     ]    Tip  If it is desired to have specific bookmarks show up only on a specific OS or a specific host, you can augment the  path  option using the notation below.  For more information, please see  Platform/Computer Specific Settings .       // Bookmarked paths \n     bookmarks :   [ \n         { name :   My Computer ,   path :   { #multiconf# :   [{ os:windows :   }]}}, \n         { name :   Root ,   path :   { #multiconf# :   [{ os:linux :   / },   { os:osx :   / }]}} \n     ]    home  home  is your home directory.  By default it is  ~  which expands to your user directory on your OS, but if you would like to modify it to be something else, this is the place!       // Location of home folder \n     home :   ~ ,   regex_exclude  regex_exclude  is an array of regular expression patterns that indicate which files and folders FuzzyFileNav should ignore.       // Patterns of files/folders to exclude \n     regex_exclude :   [ .*\\\\.(DS_Store|svn|git)$ ],   keep_panel_open_after_action  Controls whether the quick panel should remain open after a file action (such as open) as performed.       // Keep panel open after a file is opened, deleted, created, etc. so \n     // More files can be have actions performed on them. \n     keep_panel_open_after_action :   true ,   keep_panel_open_exceptions  Provides exceptions for the  keep_panel_open_after_action  setting.       // Actions that can ignore the keep panel open settings \n     // Available actions: delete, open, saveas, mkfile, mkdir, paste \n     keep_panel_open_exceptions :   [],   show_system_hidden_files  Controls whether system hidden files are shown in FuzzyFileNav. How files are hidden vary on a given OS, but this should be able to show them.       // Controls whether system hidden files are shown in FuzzyFileNav. \n     show_system_hidden_files :   true ,   completion_style  Allows the changing of the completion style to one of three styles.       // (fuzzy/windows/nix) \n     // fuzzy   - this will auto-complete with the selected index in the quick panel \n     // windows - this will complete like a windows terminal would complete paths \n     // nix     - this will complete like a unix/linux terminal traditionally completes paths \n     completion_style :   fuzzy ,   start_from_here_default_action  There are times when the a FuzzyFileNav navigation command won t be fed a path.  One example is when the  Fuzzy Nav Here...  command is run from a view that hasn t been saved to disk.  This setting allows you to sepcify the fallback options to display.       // If the  FuzzyStartFromFileCommand  is run outside of an open buffer \n     // or from a buffer that does not exist on disk, you can specify \n     // its default action to do instead of starting navigation from \n     // a file s location.  Options are  bookmarks ,  home ,  root ,  project . \n     start_from_here_default_action :   bookmarks ,   add_folder_to_project_relative  When a FuzzyFileNav adds a folder to the project, this will be used to determined if the folder should be added as a path relative to the project file or not.       // Add your folders relative to the project file (if project file exists on disk) \n     add_folder_to_project_relative :   false ,   add_folder_to_project_follow_symlink  When a FuzzyFileNav adds a folder to the project, this will be used to determined if the folder should have the  follow_symlinks  option set.       // When adding folder to project, set  follow_symlinks  setting as true or false \n     add_folder_to_project_follow_symlink :   true ,   use_sub_notify  Enables use of  SubNotify  notifications.       // Use subnotify if available \n     use_sub_notify :   true", 
            "title": "Settings"
        }, 
        {
            "location": "/usage/#suggested-accessibility-shortcuts", 
            "text": "You can create shortcuts to access FuzzyFileNav Quickly, some examples are shown below.  For Windows/Linux:       [ \n         // Start from the parent folder of the current view s file \n         {   keys :   [ ctrl+o ],   command :   fuzzy_start_from_file   }, \n         // Show bookmarked folders \n         {   keys :   [ ctrl+shift+o ],   command :   fuzzy_bookmarks_load   } \n     ]   For OSX:       [ \n         // Start from the parent folder of the current view s file \n         {   keys :   [ super+o ],   command :   fuzzy_start_from_file   }, \n         // Show bookmarked folders \n         {   keys :   [ super+shift+o ],   command :   fuzzy_bookmarks_load   } \n     ]", 
            "title": "Suggested Accessibility Shortcuts"
        }, 
        {
            "location": "/usage/#platformcomputer-specific-settings", 
            "text": "Currently, the  home  settings in the settings file, and the  path  setting in a bookmark entry can be configured to have multiple OS and/or host specific settings to help manage settings across different machines.  The syntax to configure one of these settings for multiple OS and/or hostname:   The setting should be a key/value pair, where the key is  #multiconf#  and the value is an array of key/value entries whose keys describe the host and/or os qualifiers needed for the value to be used.  The key/value entries will have a key that represents one or more qualifiers, each of which must be separated with a  ;  Each qualifier consists of the qualifier type and a qualifier value to compare against.  These will be separated by a  : .  There are two supported qualifiers:  host  and  os .   host  is the name of your PC.   os  is the platform and can be either  windows ,  linux , or  osx .  The key/value entries will have a value associated with the key, and can be of any type: string, number, array, dictionary, etc.  This value is what will be returned if the qualifier is met.   examples:       home :   { #multiconf# :   [{ os:windows :   c:\\\\Some\\\\Location },   { os:linux :   /Some/Linux/Location }]},        home :   { \n         #multiconf# :   [ \n             { os:windows :   C:\\\\Users }, \n             { os:linux;host:his_pc :   /home }, \n             { os:linux;host:her_pc :   /home/her/special } \n         ] \n     }", 
            "title": "Platform/Computer Specific Settings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nFuzzyFileNav is released under the MIT license.\n\n\nCopyright \n 2012 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "FuzzyFileNav is released under the MIT license.  Copyright   2012 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}